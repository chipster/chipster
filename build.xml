<?xml version="1.0" encoding="UTF-8"?>

<project name="Chipster" default="package" basedir=".">
	<description>
		The Chipster server installation package (incl. client and everything)
    	</description>
	
	<!-- get the environment variables -->
	<property environment="env" />

	<!-- the project folder configuration -->
	<property name="src" location="src/main/java" />
	<property name="admin-src" location="src/main/admin" />
	<property name="admin-web" location="src/main/web/admin-web" />
	<property name="admin-web-bin" location="${admin-web}/bin/ant" />
	<property name="tool-editor" location="src/main/web/tool-editor" />
	<property name="tool-editor-bin" location="${tool-editor}/bin/ant" />
	<property name="modules-src-microarray" location="src/main/modules/microarray/java" />
	<property name="modules-src-ngs" location="src/main/modules/ngs/java" />
	<property name="modules" location="src/main/modules" />
	<property name="test-src" location="src/test/java" />
	<property name="ext-src" location="src/main/applications" />
	<property name="lib" location="ext/lib" />
	<property name="lib-src" location="ext/lib-src" />
	<property name="lib-ext" location="ext/lib-ext" />
	<property name="ext-apps" location="ext/applications" />
	<property name="data" location="src/main/resources" />
	<property name="manual" location="src/main/manual" />
	<property name="workflows" location="src/main/workflows" />
	<property name="build" location="bin/ant" />	
	<property name="dist" location="dist" />

    <!-- import FatJAR -->
    <property name="fjepPath" value="${lib-ext}/fatjar.jar"/>
    <taskdef name="fatjar.build" classname="net.sf.fjep.anttask.FJBuildTask" classpath="${fjepPath}" loaderref="lib.path.loader"/>
	<typedef name="fatjar.manifest" classname="net.sf.fjep.anttask.FJManifestType" classpath="${fjepPath}" loaderref="lib.path.loader"/>
    <typedef name="fatjar.exclude" classname="net.sf.fjep.anttask.FJExcludeType" classpath="${fjepPath}" loaderref="lib.path.loader"/>
    <typedef name="fatjar.jarsource" classname="net.sf.fjep.anttask.FJJarSourceType" classpath="${fjepPath}" loaderref="lib.path.loader"/>
    <typedef name="fatjar.filesource" classname="net.sf.fjep.anttask.FJFileSourceType" classpath="${fjepPath}" loaderref="lib.path.loader"/>

	<!-- version numbering -->
	<property name="release-version" value="3.2.0" />
	<property name="release-jar" value="${dist}/chipster-${release-version}.jar" />
	<property name="release-tar" value="${dist}/chipster-${release-version}.tar.gz" />
	<property name="release-zip" value="${dist}/chipster-${release-version}.zip" />
	<property name="config-tool-jar" value="${dist}/chipster-config-tool.jar" />
	<property name="client-jar" value="${dist}/chipster-all-${release-version}.jar" />

	<property name="javac-target" value="1.7" />
	<property name="javac-source" value="1.7" />
	
	
	<!-- external stuff -->
	<property name="wrapper-dist" value="${ext-apps}/wrapper" />
	<property name="wrapper-linux-x86-32" value="${wrapper-dist}/wrapper-linux-x86-32-3.5.7" />
	<property name="wrapper-linux-x86-64" value="${wrapper-dist}/wrapper-linux-x86-64-3.5.7" />
	<property name="activemq-dist" value="${ext-apps}/apache-activemq-5.10.0" />

	<!-- keystore for signing -->
	<property name="keyalias" value="chipster" />
	<property name="default-keystore" value="keystore.ks" />

	<target name="clean" description="Remove previously compiled and generated files">
		<delete dir="${build}" />
		<mkdir dir="${build}" />
	</target>
	
	<!-- separate client jar will be removed in future, but while waiting for it... -->
	<target name="package-client-jar" depends="compile, is-alt-keystore-available, load-alt-keystore-path, use-default-keystore-path, is-keystore-available, warn-about-keystore" description="Creates one fat client jar">

		<!-- build one fat jar -->
		<fatjar.build output="${client-jar}">
			<fatjar.manifest manifestfile="${src}/MANIFEST.MF" />
			<fatjar.filesource path="${build}" relpath=""/>
			<fatjar.filesource path="${data}" relpath=""/>
			<fatjar.filesource path="${workflows}" relpath=""/>

        	<fatjar.jarsource file="${lib}/concurrent.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/log4j-1.2.17.jar" relpath=""/>
            <fatjar.jarsource file="${lib}/jgraph-5.12.2.1.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/antlr-3.0b7.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/antlr-2.7.7.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/stringtemplate-3.0.jar" relpath=""/>
        	<!-- Viski has to be before jfreechart (maybe also before jcommon) 
        	to make it's files override ones from JFreeChart. -->
            <fatjar.jarsource file="${lib}/viski-chipster-1.0.1.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/commons-pool-1.3.jar" relpath=""/>
            <fatjar.jarsource file="${lib}/commons-daemon.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/swingx-1.0.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/bsh-2.0b4.jar" relpath=""/>
            <fatjar.jarsource file="${lib}/jcommon-1.0.9.jar" relpath=""/>   
            <fatjar.jarsource file="${lib}/jfreechart-1.0.5.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/looks-2.1.4.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/commons-io-2.2.jar" relpath=""/>
           	<fatjar.jarsource file="${lib}/eclipse-icons.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/activemq-all-5.10.0.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/commons-logging-1.1.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/sam-1.103.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/picard-1.103.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/tribble-1.103.jar" relpath=""/>
	    	<fatjar.jarsource file="${lib}/saaj-api.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/saaj-impl.jar" relpath=""/>
        	<fatjar.jarsource file="${lib}/activation.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/cron4j-1.1.5.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/icepdf-core.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/icepdf-viewer.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/batik-awt-util.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/batik-svg-dom.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/batik-svggen.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/batik-util.jar" relpath=""/>
 		    <fatjar.jarsource file="${lib}/batik-xml.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/h2-1.3.163.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/snakeyaml-1.11.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/truezip-samples-7.7.6-jar-with-dependencies.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-ajp-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-annotations-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-client-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-continuation-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-deploy-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-http-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-io-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-jmx-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-jndi-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-overlay-deployer-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-plus-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-policy-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-rewrite-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-security-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-server-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-servlet-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-servlets-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-util-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-webapp-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-websocket-8.1.5.v20120716.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/jetty-xml-8.1.5.v20120716.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/spring.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/miglayout-4.0-swing.jar" relpath=""/>
		    <fatjar.jarsource file="${lib}/joda-time-2.3.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/commons-lang3-3.1.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/jemboss-new.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/jakarta-regexp-1.5.jar" relpath=""/>
			<fatjar.jarsource file="${lib}/argparse4j-0.4.3.jar" relpath=""/>
		    </fatjar.build>

		<!-- sign it -->
		<input message="Give keystore passphrase for client JAR signing:" addproperty="keystorepass" />
		<input message="Give key passphrase for client JAR signing:" addproperty="keypass" />
		<signjar keystore="${keystore}" jar="${client-jar}" alias="${keyalias}" storepass="${keystorepass}" keypass="${keypass}" />
		<verifyjar jar="${client-jar}" />

    </target>

	<target name="warn-about-keystore" unless="keystore-exists">
		<fail message="Keystore file ${keystore} not found. You need to generate a key for signing the client JAR." />
	</target>

	<target name="is-keystore-available">
		<available file="${keystore}" property="keystore-exists"/>
	</target>

	<target name="is-alt-keystore-available">
		<available file="alternative-keystore-path.txt" property="alt-keystore-exists"/>
	</target>
	
	<target name="load-alt-keystore-path" if="alt-keystore-exists">
		<loadfile srcfile="alternative-keystore-path.txt" property="keystore" />
	</target>

	<target name="use-default-keystore-path" unless="alt-keystore-exists">
		<property name="keystore" value="${default-keystore}" />
	</target>

	<target name="compile" depends="clean" description="Compile the source code">

		<!-- update automatic numbering -->
		<buildnumber file="${data}/build.number" />
		<echo>Build number was ${build.number}, incremented by one.</echo>
		<propertyfile file="${data}/version.number">
			<entry key="version.number" value="${release-version}" />
		</propertyfile>

		<!-- compile chipster main -->
		<delete dir="${build}" quiet="true" />
		<mkdir dir="${build}" />
		<javac destdir="${build}" target="${javac-target}" source="${javac-source}" debug="true" failonerror="true">
			<src path="${src}" />
			<src path="${test-src}" />
			<src path="${modules-src-microarray}" />
			<src path="${modules-src-ngs}" />
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>

		<!-- compile admin web -->		
		<delete dir="${admin-web-bin}" quiet="true" />
		<mkdir dir="${admin-web-bin}" />
		<javac destdir="${admin-web-bin}" target="${javac-target}" source="${javac-source}" debug="true" failonerror="true">
			<src path="${admin-web}/src" />
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
				<pathelement location="${build}" />
				<fileset dir="${admin-web}/WebContent/WEB-INF/lib">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="${admin-web}/WebContent/WEB-INF/lib-ivy">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>

		<!-- compile tooleditor -->		
		<delete dir="${tool-editor-bin}" quiet="true" />
		<mkdir dir="${tool-editor-bin}" />
		<javac destdir="${tool-editor-bin}" target="${javac-target}" source="${javac-source}" debug="true" failonerror="true">
			<src path="${tool-editor}/src" />
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
				<pathelement location="${build}" />
				<fileset dir="${tool-editor}/WebContent/WEB-INF/lib-ivy">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>

		<!-- compile tooleditor sass style sheet to css style sheet which is required by vaadin production mode-->		
		<java classname="com.vaadin.sass.SassCompiler">
			<arg value="${tool-editor}/WebContent/VAADIN/themes/tool_editor/styles.scss" />
			<arg value="${tool-editor}/WebContent/VAADIN/themes/tool_editor/styles.css" />
			<classpath>
				<fileset dir="${tool-editor}/WebContent/WEB-INF/lib-ivy">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</java>			
		
		
		<!-- add other stuff to build dir -->
		<copy file="${src}/log4j.properties" tofile="${build}/log4j.properties" />
		<copy file="${src}/log4j-enabled.properties" tofile="${build}/log4j-enabled.properties" />

		<copy file="${src}/fi/csc/microarray/client/session/session.xsd" tofile="${build}/fi/csc/microarray/client/session/session.xsd" />
		<copy file="${src}/fi/csc/microarray/client/session/session2.xsd" tofile="${build}/fi/csc/microarray/client/session/session2.xsd" />

	</target>

	<target name="package-jar" depends="compile, package-admin-web-war, package-tool-editor-war" description="Create chipster jar">
		<jar destfile="${release-jar}">
			<manifest>
				<attribute name="Main-Class" value="fi.csc.microarray.MicroarrayMain" />
			</manifest>
			<fileset dir="${build}/" />
			<fileset dir="${data}/" />
		</jar>
	</target>

	<target name="package-config-tool" depends="compile" description="Create config tool jar">

		<jar destfile="${config-tool-jar}">
			<manifest>
				<attribute name="Main-Class" value="fi.csc.microarray.config.ConfigTool" />
			</manifest>
			<fileset dir="${build}">
				<include name="fi/csc/microarray/config/*" />
				<include name="fi/csc/microarray/util/*" />
			</fileset>
		</jar>
	</target>

	<target name="package-tar" description="Create chipster tar">
		<tar destfile="${release-tar}" longfile="gnu" compression="gzip">

			<!-- shared -->
			<tarfileset file="${release-jar}" prefix="chipster/shared/lib" />
			<tarfileset file="${config-tool-jar}" prefix="chipster/shared/lib" />
			<tarfileset file="${wrapper-linux-x86-32}/lib/wrapper.jar" prefix="chipster/shared/lib" />
			<tarfileset file="${wrapper-linux-x86-32}/lib/libwrapper.so" filemode="755" fullpath="chipster/shared/lib/libwrapper-linux-x86-32.so" />
			<tarfileset file="${wrapper-linux-x86-64}/lib/libwrapper.so" filemode="755" fullpath="chipster/shared/lib/libwrapper-linux-x86-64.so" />
			<tarfileset dir="${lib}" prefix="chipster/shared/lib" />
			<tarfileset dir="${lib-src}" prefix="chipster/shared/lib-src" />
			<tarfileset dir="${ext-src}/wrapper/shared/bin" filemode="755" prefix="chipster/shared/bin" />
			<tarfileset file="${ext-src}/wrapper/chipster" filemode="755" prefix="chipster" />
			<tarfileset file="${ext-src}/wrapper/readme.txt" prefix="chipster" />
			
			<!-- config tool -->
			<tarfileset file="${ext-src}/wrapper/configure.sh" filemode="755" prefix="chipster" />
			<tarfileset file="${ext-src}/wrapper/genpasswd.sh" filemode="755" prefix="chipster" />
			<tarfileset file="${ext-src}/wrapper/download-tools.sh" filemode="755" prefix="chipster" />
			<tarfileset file="${admin-src}/vm/update.sh" filemode="755" prefix="chipster" />
			<tarfileset file="${admin-src}/bundle/bundle.py" filemode="755" prefix="chipster/" />
			
			<!-- auth -->
			<tarfileset file="${ext-src}/wrapper/auth/chipster-auth-generic" filemode="755" fullpath="chipster/auth/bin/chipster-auth" />

			<tarfileset file="${wrapper-linux-x86-32}/bin/wrapper" filemode="755" prefix="chipster/auth/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/wrapper/auth/chipster-auth" filemode="755" prefix="chipster/auth/bin/linux-x86-32" />

			<tarfileset file="${wrapper-linux-x86-64}/bin/wrapper" filemode="755" prefix="chipster/auth/bin/linux-x86-64" />
			<tarfileset file="${ext-src}/wrapper/auth/chipster-auth" filemode="755" prefix="chipster/auth/bin/linux-x86-64" />

			<tarfileset dir="${ext-src}/wrapper/auth/conf" prefix="chipster/auth/conf" />
			<tarfileset dir="${ext-src}/wrapper/auth/logs" prefix="chipster/auth/logs" /> <!-- must exist for wrapper -->
			<tarfileset dir="${ext-src}/wrapper/auth/security" prefix="chipster/auth/security" />

			
			
			<!-- comp -->
			<tarfileset file="${ext-src}/wrapper/comp/chipster-comp-generic" filemode="755" fullpath="chipster/comp/bin/chipster-comp" />
			
			<tarfileset file="${wrapper-linux-x86-32}/bin/wrapper" filemode="755" prefix="chipster/comp/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/wrapper/comp/chipster-comp" filemode="755" prefix="chipster/comp/bin/linux-x86-32" />

			<tarfileset file="${wrapper-linux-x86-64}/bin/wrapper" filemode="755" prefix="chipster/comp/bin/linux-x86-64" />
			<tarfileset file="${ext-src}/wrapper/comp/chipster-comp" filemode="755" prefix="chipster/comp/bin/linux-x86-64" />

			<tarfileset dir="${ext-src}/wrapper/comp/conf" prefix="chipster/comp/conf" />
			<tarfileset dir="${ext-src}/wrapper/comp/logs" prefix="chipster/comp/logs" /> <!-- must exist for wrapper -->
			<tarfileset dir="${ext-src}/wrapper/comp/security" prefix="chipster/comp/security" />

			<!-- modules, executables separated so that permissions can be set for them -->
			<selector id="executable.files">
				<or>
					<filename name="**/*.sh" />
					<filename name="**/*.py" />
				</or>	
			</selector>
			<tarfileset dir="${modules}/" prefix="chipster/comp/modules" >
				<exclude name="sequence/" />
				<not><selector refid="executable.files" /></not>
			</tarfileset>
			<tarfileset dir="${modules}/" prefix="chipster/comp/modules" filemode="755">
				<selector refid="executable.files" />
			</tarfileset>
			

			<!-- fileserver -->
			<tarfileset file="${ext-src}/wrapper/fileserver/chipster-fileserver-generic" filemode="755" fullpath="chipster/fileserver/bin/chipster-fileserver" />
			
			<tarfileset file="${wrapper-linux-x86-32}/bin/wrapper" filemode="755" prefix="chipster/fileserver/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/wrapper/fileserver/chipster-fileserver" filemode="755" prefix="chipster/fileserver/bin/linux-x86-32" />

			<tarfileset file="${wrapper-linux-x86-64}/bin/wrapper" filemode="755" prefix="chipster/fileserver/bin/linux-x86-64" />
			<tarfileset file="${ext-src}/wrapper/fileserver/chipster-fileserver" filemode="755" prefix="chipster/fileserver/bin/linux-x86-64" />

			<tarfileset dir="${ext-src}/wrapper/fileserver/conf" prefix="chipster/fileserver/conf" />
			<tarfileset dir="${ext-src}/wrapper/fileserver/logs" prefix="chipster/fileserver/logs" /> <!-- must exist for wrapper -->
			<tarfileset dir="${ext-src}/wrapper/fileserver/security" prefix="chipster/fileserver/security" />
			<tarfileset file="${data}/keystore.ks" prefix="chipster/fileserver/security" />
			

			<!-- web start -->
			<tarfileset file="${ext-src}/wrapper/webstart/chipster-webstart-generic" filemode="755" fullpath="chipster/webstart/bin/chipster-webstart" />
			
			<tarfileset file="${wrapper-linux-x86-32}/bin/wrapper" filemode="755" prefix="chipster/webstart/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/wrapper/webstart/chipster-webstart" filemode="755" prefix="chipster/webstart/bin/linux-x86-32" />

			<tarfileset file="${wrapper-linux-x86-64}/bin/wrapper" filemode="755" prefix="chipster/webstart/bin/linux-x86-64" />
			<tarfileset file="${ext-src}/wrapper/webstart/chipster-webstart" filemode="755" prefix="chipster/webstart/bin/linux-x86-64" />

			<tarfileset dir="${ext-src}/wrapper/webstart/web-root" prefix="chipster/webstart/web-root" />
			<tarfileset dir="${manual}" prefix="chipster/webstart/web-root/manual" />
			<tarfileset file="${client-jar}" fullpath="chipster/webstart/web-root/lib/chipster-current.jar" />
			<tarfileset file="${ext-src}/wrapper/chipster-client-config.xml" fullpath="chipster/webstart/web-root/chipster-config.xml" />
			<tarfileset dir="${ext-src}/wrapper/webstart/security" prefix="chipster/webstart/security" />
			<tarfileset file="${data}/keystore.ks" prefix="chipster/webstart/security" />

			<tarfileset dir="${ext-src}/wrapper/webstart/conf" prefix="chipster/webstart/conf" />
			<tarfileset dir="${ext-src}/wrapper/webstart/logs" prefix="chipster/webstart/logs" /> <!-- must exist for wrapper -->
			<tarfileset file="${dist}/tool-editor.war" prefix="chipster/webstart/webapps" />
			
			
			<!-- manager -->
			<tarfileset file="${ext-src}/wrapper/manager/chipster-manager-generic" filemode="755" fullpath="chipster/manager/bin/chipster-manager" />
			
			<tarfileset file="${wrapper-linux-x86-32}/bin/wrapper" filemode="755" prefix="chipster/manager/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/wrapper/manager/chipster-manager" filemode="755" prefix="chipster/manager/bin/linux-x86-32" />

			<tarfileset file="${wrapper-linux-x86-64}/bin/wrapper" filemode="755" prefix="chipster/manager/bin/linux-x86-64" />
			<tarfileset file="${ext-src}/wrapper/manager/chipster-manager" filemode="755" prefix="chipster/manager/bin/linux-x86-64" />

			<tarfileset dir="${ext-src}/wrapper/manager/conf" prefix="chipster/manager/conf" />
			<tarfileset dir="${ext-src}/wrapper/manager/logs" prefix="chipster/manager/logs" /> <!-- must exist for wrapper -->
			<tarfileset dir="${ext-src}/wrapper/manager/security" prefix="chipster/manager/security" />
			<tarfileset file="${data}/keystore.ks" prefix="chipster/manager/security" />

			<tarfileset dir="${ext-src}/wrapper/manager/testrunner" prefix="chipster/manager/testrunner" />
			<tarfileset file="${dist}/admin-web.war" prefix="chipster/manager/webapps" />
			
			<tarfileset file="${ext-src}/wrapper/comp-admin.sh" filemode="755" prefix="chipster/manager/bin" />
		
			
			<!-- activemq -->
			<!-- this looks weird because tar task does not preserve file permissions and activemq has messed up with some files -->
			<tarfileset dir="${activemq-dist}" prefix="chipster/activemq" />
			<tarfileset file="${activemq-dist}/bin/activemq" filemode="755" prefix="chipster/activemq/bin" />
			<tarfileset file="${activemq-dist}/bin/activemq-admin" filemode="755" prefix="chipster/activemq/bin" />
			<tarfileset file="${activemq-dist}/bin/linux-x86-32/wrapper" filemode="755" prefix="chipster/activemq/bin/linux-x86-32" />
			<tarfileset file="${activemq-dist}/bin/linux-x86-32/libwrapper.so" filemode="755" prefix="chipster/activemq/bin/linux-x86-32" />
			<tarfileset file="${activemq-dist}/bin/linux-x86-64/wrapper" filemode="755" prefix="chipster/activemq/bin/linux-x86-64" />
			<tarfileset file="${activemq-dist}/bin/linux-x86-64/libwrapper.so" filemode="755" prefix="chipster/activemq/bin/linux-x86-64" />
			
			<tarfileset file="${ext-src}/activemq/activemq" filemode="755" prefix="chipster/activemq/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/activemq/activemq" filemode="755" prefix="chipster/activemq/bin/linux-x86-64" />
			<tarfileset file="${ext-src}/activemq/activemq.xml" prefix="chipster/activemq/conf" />
			<tarfileset file="${data}/keystore.ks" prefix="chipster/activemq/conf" />

			<tarfileset file="${ext-src}/activemq/wrapper/linux-x86-32/wrapper.conf" prefix="chipster/activemq/bin/linux-x86-32" />
			<tarfileset file="${ext-src}/activemq/wrapper/linux-x86-64/wrapper.conf" prefix="chipster/activemq/bin/linux-x86-64" />
			
		</tar>

	</target>
	
	
	<target name="package" depends="package-jar, package-config-tool, package-client-jar, package-admin-web-war, package-tool-editor-war, package-tar" description="Create jars and tar">
		<echo>REMEMBER TO TURN DEBUG LOGGING OFF!</echo>
	</target>
	
	<target name="generate-session-classes" description="">
		<delete dir="src/main/java/fi/csc/microarray/client/session/schema2" />

		<java classname="com.sun.tools.internal.xjc.XJCFacade">
	            <arg value="-p" />
	            <arg value="fi.csc.microarray.client.session.schema2"/>
            	<arg value="-d" />
            	<arg value="src/main/java"/>
	    		<arg value="src/main/java/fi/csc/microarray/client/session/session2.xsd" />
	    </java>
	</target>	
	
	<target name="package-tool-editor-war" description="Package tool-editor web application">
		<war destfile="${dist}/tool-editor.war" webxml="${tool-editor}/WebContent/WEB-INF/web.xml">
			<lib dir="${tool-editor}/WebContent/WEB-INF/lib-ivy" />
			<fileset dir="${tool-editor}/WebContent">
				<include name="VAADIN/**"/>
			</fileset>
			<classes dir="${tool-editor-bin}" />
		</war>
	</target>

	<target name="package-admin-web-war" description="Package admin web web application">
		<war destfile="${dist}/admin-web.war" webxml="${admin-web}/WebContent/WEB-INF/web.xml">
			<lib dir="${admin-web}/WebContent/WEB-INF/lib-ivy" />
			<lib dir="${admin-web}/WebContent/WEB-INF/lib" />
			<fileset dir="${admin-web}/WebContent">
				<include name="WEB-INF/*-module-*.xml"/>
			</fileset>
			<fileset dir="${admin-web}/WebContent">
				<include name="VAADIN/**"/>
			</fileset>
			<classes dir="${admin-web-bin}" />
		</war>
	</target>
</project>

